{
    "docs": [
        {
            "location": "/", 
            "text": "Willer Framework\n\n\nWiller is a PHP framework, it was created based on ideas coming from other frameworks like Codeigniter(php) and Django(python).\n\n\nRequisites \n Dependencies\n\n\n\n\nPHP \n= 5.6\n\n\nWhoops - php errors for cool kids\n\n\nTwig - templating(optional)\n\n\n\n\nFeatures\n\n\n\n\nORM(like Django)\n\n\nMVC(merge Codeigniter and Django)\n\n\nRun immediately, php server built-in integrated, like \n./runserver.sh\n\n\n\n\nDownload \n Install\n\n\n\n\nGIT: \ngit clone\n the \nGitHub project page\n\n\nComposer: \ncomposer create-project wborba/willer --dev\n\n\n\n\nHighlights\n\n\nRoutes\n\n\nRoutes in style Django by single file \nurl.php\n. Example.\n\n\n// url's frontend\n$URL = [\n    \n/^\\/?$/\n                     =\n [\nMyFrontend/Home/index\n,null],\n    \n/^home\\/?$/\n                 =\n [\nMyFrontend/Company/index\n,null],\n    \n/^product\\/?$/\n              =\n [\nMyFrontend/Product/index\n,null],\n    \n/^product\\/([a-z0-9]+)\\/?$/\n =\n [\nMyFrontend/Product/detail\n,null],\n    \n/^contato\\/?$/\n              =\n [\nMyFrontend/Contact/contact\n,null],\n];\n\n// ajax requests\n// limiting the request by the HTTP protocol type (REST)\n$URL += [\n    \n/^request\\/product\\/?$/\n           =\n [\nMyFrontend/Request/productList\n,[\nGET\n]],\n    \n/^request\\/product\\/([0-9]+)\\/?$/\n =\n [\nMyFrontend/Request/productDetail\n,[\nGET\n]],\n    \n/^request\\/product\\/add\\/?$/\n      =\n [\nMyFrontend/Request/productAdd\n,[\nPOST\n]],\n];\n\n// url's backend\n$URL += [\n    \n/^admin\\/?$/\n =\n [\nMyBackend/Dashboard/index\n,null],\n];\n\n// blog\n$URL += [\n    \n/^blog\\/?$/\n            =\n [\nMyBlog/Blog/index\n,null],\n    \n/^blog\\/([\\w\\d]+)\\/?$/\n =\n [\nMyBlog/Blog/detail\n,null],\n];\n\n\n\n\n\nModels\n\n\nModels Django like style.\n\n\nExample sql.\n\n\nCREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place_id`  TEXT,\n    `name`  TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL,\n    FOREIGN KEY(`place_id`) REFERENCES place\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant_id` INTEGER,\n    `name`  TEXT NOT NULL,\n    FOREIGN KEY(`restaurant_id`) REFERENCES restaurant\n);\n\n\n\n\nExample model class Place, Restaurant and Waiter.\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Place.php\n\n\nApplication\\Restaurant\\Model\\Place\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n\n    class Place extends Model {\n        public $id;\n        public $name;\n        public $address;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'name' =\n Model::char(['length' =\n 40]),\n                'address' =\n Model::char(['length' =\n 40]),];\n        }\n\n        protected function name() {\n            return 'place';\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Restaurant.php\n\n\nApplication\\Restaurant\\Model\\Restaurant\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    use \\Application\\Restaurant\\Model\\Place;\n\n    class Restaurant extends Model {\n        public $id;\n        public $place_id;\n        public $name;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'place_id' =\n Model::foreignKey(['table' =\n new Place,'null' =\n true]),\n                'name' =\n Model::char(['length' =\n 40]),\n                'serves_hot_dogs' =\n Model::boolean(['null' =\n false]),\n                'serves_pizza' =\n Model::boolean(['null' =\n false]),];\n        }\n\n        protected function name() {\n            return 'restaurant';\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Waiter.php\n\n\nApplication\\Restaurant\\Model\\Waiter\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n\n    class Waiter extends Model {\n        public $id;\n        public $restaurant_id;\n        public $name;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'restaurant_id' =\n Model::foreignKey(['table' =\n new Restaurant,'null' =\n true]),\n                'name' =\n Model::char(['length' =\n 40]),];\n        }\n\n        protected function name() {\n            return 'waiter';\n        }\n    }\n}\n\n\n\n\nController\n\n\nORM engine, style Django and Active Records.\n\n\nController \nHome.php\n with method/view \nrestaurantAdd\n contains transaction example.\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Controller/Home.php\n\n\nApplication\\Restaurant\\Controller\\Home\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\DAO\\Transaction;\n    use \\Core\\Util;\n    use \\Application\\Restaurant\\Model\\Place;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n    use \\Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this-\ntransaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ntransaction);\n            $place = new Place($this-\ntransaction);\n            $waiter = new Waiter($this-\ntransaction);\n\n            try {\n                // open connection with begin transaction\n                $this-\ntransaction-\nbeginTransaction();\n\n                // save place\n                $place-\nsave([\n                    'name' =\n 'place name test',\n                    'address' =\n 'place address test',]);\n\n                // save restaurant\n                $restaurant-\nsave([\n                    'place_id' =\n $place,\n                    'name' =\n 'restaurant name test',\n                    'serves_hot_dogs' =\n 1,\n                    'serves_pizza' =\n 1,]);\n\n                // save waiter\n                $waiter-\nsave([\n                    'restaurant_id' =\n $restaurant,\n                    'name' =\n 'waiter name test']);\n\n                // commit\n                $this-\ntransaction-\ncommit();\n\n            } catch (Exception $error) {\n                // rollBack\n                $this-\ntransaction-\nrollBack();\n            }\n        }\n    }\n}\n\n\n\n\nRetrieve query's history in real time.\n\n\n// return restaurant query's\n$restaurant-\ndumpQuery();\n\n// return place query's\n$place-\ndumpQuery();\n\n// return waiter query's\n$waiter-\ndumpQuery();\n\n\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.", 
            "title": "Index"
        }, 
        {
            "location": "/#willer-framework", 
            "text": "Willer is a PHP framework, it was created based on ideas coming from other frameworks like Codeigniter(php) and Django(python).", 
            "title": "Willer Framework"
        }, 
        {
            "location": "/#requisites-dependencies", 
            "text": "PHP  = 5.6  Whoops - php errors for cool kids  Twig - templating(optional)", 
            "title": "Requisites &amp; Dependencies"
        }, 
        {
            "location": "/#features", 
            "text": "ORM(like Django)  MVC(merge Codeigniter and Django)  Run immediately, php server built-in integrated, like  ./runserver.sh", 
            "title": "Features"
        }, 
        {
            "location": "/#download-install", 
            "text": "GIT:  git clone  the  GitHub project page  Composer:  composer create-project wborba/willer --dev", 
            "title": "Download &amp; Install"
        }, 
        {
            "location": "/#highlights", 
            "text": "Routes  Routes in style Django by single file  url.php . Example.  // url's frontend\n$URL = [\n     /^\\/?$/                      =  [ MyFrontend/Home/index ,null],\n     /^home\\/?$/                  =  [ MyFrontend/Company/index ,null],\n     /^product\\/?$/               =  [ MyFrontend/Product/index ,null],\n     /^product\\/([a-z0-9]+)\\/?$/  =  [ MyFrontend/Product/detail ,null],\n     /^contato\\/?$/               =  [ MyFrontend/Contact/contact ,null],\n];\n\n// ajax requests\n// limiting the request by the HTTP protocol type (REST)\n$URL += [\n     /^request\\/product\\/?$/            =  [ MyFrontend/Request/productList ,[ GET ]],\n     /^request\\/product\\/([0-9]+)\\/?$/  =  [ MyFrontend/Request/productDetail ,[ GET ]],\n     /^request\\/product\\/add\\/?$/       =  [ MyFrontend/Request/productAdd ,[ POST ]],\n];\n\n// url's backend\n$URL += [\n     /^admin\\/?$/  =  [ MyBackend/Dashboard/index ,null],\n];\n\n// blog\n$URL += [\n     /^blog\\/?$/             =  [ MyBlog/Blog/index ,null],\n     /^blog\\/([\\w\\d]+)\\/?$/  =  [ MyBlog/Blog/detail ,null],\n];  Models  Models Django like style.  Example sql.  CREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place_id`  TEXT,\n    `name`  TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL,\n    FOREIGN KEY(`place_id`) REFERENCES place\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant_id` INTEGER,\n    `name`  TEXT NOT NULL,\n    FOREIGN KEY(`restaurant_id`) REFERENCES restaurant\n);  Example model class Place, Restaurant and Waiter.     File  Namespace/Class      Application/Restaurant/Model/Place.php  Application\\Restaurant\\Model\\Place     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n\n    class Place extends Model {\n        public $id;\n        public $name;\n        public $address;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'name' =  Model::char(['length' =  40]),\n                'address' =  Model::char(['length' =  40]),];\n        }\n\n        protected function name() {\n            return 'place';\n        }\n    }\n}     File  Namespace/Class      Application/Restaurant/Model/Restaurant.php  Application\\Restaurant\\Model\\Restaurant     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    use \\Application\\Restaurant\\Model\\Place;\n\n    class Restaurant extends Model {\n        public $id;\n        public $place_id;\n        public $name;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'place_id' =  Model::foreignKey(['table' =  new Place,'null' =  true]),\n                'name' =  Model::char(['length' =  40]),\n                'serves_hot_dogs' =  Model::boolean(['null' =  false]),\n                'serves_pizza' =  Model::boolean(['null' =  false]),];\n        }\n\n        protected function name() {\n            return 'restaurant';\n        }\n    }\n}     File  Namespace/Class      Application/Restaurant/Model/Waiter.php  Application\\Restaurant\\Model\\Waiter     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n\n    class Waiter extends Model {\n        public $id;\n        public $restaurant_id;\n        public $name;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'restaurant_id' =  Model::foreignKey(['table' =  new Restaurant,'null' =  true]),\n                'name' =  Model::char(['length' =  40]),];\n        }\n\n        protected function name() {\n            return 'waiter';\n        }\n    }\n}  Controller  ORM engine, style Django and Active Records.  Controller  Home.php  with method/view  restaurantAdd  contains transaction example.     File  Namespace/Class      Application/Restaurant/Controller/Home.php  Application\\Restaurant\\Controller\\Home     ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\DAO\\Transaction;\n    use \\Core\\Util;\n    use \\Application\\Restaurant\\Model\\Place;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n    use \\Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this- transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- transaction);\n            $place = new Place($this- transaction);\n            $waiter = new Waiter($this- transaction);\n\n            try {\n                // open connection with begin transaction\n                $this- transaction- beginTransaction();\n\n                // save place\n                $place- save([\n                    'name' =  'place name test',\n                    'address' =  'place address test',]);\n\n                // save restaurant\n                $restaurant- save([\n                    'place_id' =  $place,\n                    'name' =  'restaurant name test',\n                    'serves_hot_dogs' =  1,\n                    'serves_pizza' =  1,]);\n\n                // save waiter\n                $waiter- save([\n                    'restaurant_id' =  $restaurant,\n                    'name' =  'waiter name test']);\n\n                // commit\n                $this- transaction- commit();\n\n            } catch (Exception $error) {\n                // rollBack\n                $this- transaction- rollBack();\n            }\n        }\n    }\n}  Retrieve query's history in real time.  // return restaurant query's\n$restaurant- dumpQuery();\n\n// return place query's\n$place- dumpQuery();\n\n// return waiter query's\n$waiter- dumpQuery();", 
            "title": "Highlights"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.", 
            "title": "License"
        }, 
        {
            "location": "/setup/configuration/", 
            "text": "Configuration\n\n\nFor running, open the console and runner file with command \n./runserver.sh\n in the directory where the project.\n\nWiller\n not need a web server to run, taking advantage of the built-in php service.\n\n\nRequisites \n Dependencies\n\n\n\n\nPHP \n= 5.6\n\n\nWhoops - php errors for cool kids\n\n\nTwig - templating(optional)\n\n\nPHPUnit - programmer-oriented testing framework for PHP\n\n\n\n\nDownload \n Install\n\n\nPode ser instalado pelo GitHub ou Composer.\n\n\n\n\nGIT: \ngit clone\n the \nGitHub project page\n\n\nComposer: \ncomposer create-project wborba/willer\n\n\n\n\nPHP server built-in\n\n\nExecute command \n./runserver.sh\n\n\nNginx + php5-fpm\n\n\nEnable URL rewrite(is required), on file \ndefault\n and also in other in your sites-avaliable path.\n\n\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    server_name localhost;\n\n    location / {\n            autoindex on;\n    }\n\n    location /willer {\n            rewrite ^/willer/(.*) /willer/src/bootstrap.php;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|woff2)$ {\n            expires max;\n            log_not_found off;\n    }\n\n    location ~ \\.php$ {\n            include snippets/fastcgi-php.conf;\n            fastcgi_pass unix:/var/run/php5-fpm.sock;\n    }\n}\n\n\n\n\nreplace \nwiller\n by the path where its application will run.\nThe \nbootstrap.php\n file is ha index for willer.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.", 
            "title": "Configuration"
        }, 
        {
            "location": "/setup/configuration/#configuration", 
            "text": "For running, open the console and runner file with command  ./runserver.sh  in the directory where the project. Willer  not need a web server to run, taking advantage of the built-in php service.", 
            "title": "Configuration"
        }, 
        {
            "location": "/setup/configuration/#requisites-dependencies", 
            "text": "PHP  = 5.6  Whoops - php errors for cool kids  Twig - templating(optional)  PHPUnit - programmer-oriented testing framework for PHP", 
            "title": "Requisites &amp; Dependencies"
        }, 
        {
            "location": "/setup/configuration/#download-install", 
            "text": "Pode ser instalado pelo GitHub ou Composer.   GIT:  git clone  the  GitHub project page  Composer:  composer create-project wborba/willer", 
            "title": "Download &amp; Install"
        }, 
        {
            "location": "/setup/configuration/#php-server-built-in", 
            "text": "Execute command  ./runserver.sh", 
            "title": "PHP server built-in"
        }, 
        {
            "location": "/setup/configuration/#nginx-php5-fpm", 
            "text": "Enable URL rewrite(is required), on file  default  and also in other in your sites-avaliable path.  server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    server_name localhost;\n\n    location / {\n            autoindex on;\n    }\n\n    location /willer {\n            rewrite ^/willer/(.*) /willer/src/bootstrap.php;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|woff2)$ {\n            expires max;\n            log_not_found off;\n    }\n\n    location ~ \\.php$ {\n            include snippets/fastcgi-php.conf;\n            fastcgi_pass unix:/var/run/php5-fpm.sock;\n    }\n}  replace  willer  by the path where its application will run.\nThe  bootstrap.php  file is ha index for willer.", 
            "title": "Nginx + php5-fpm"
        }, 
        {
            "location": "/setup/configuration/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.", 
            "title": "License"
        }, 
        {
            "location": "/setup/constants/", 
            "text": "Constants\n\n\nAs constants s\u00e3o todas definidas no arquivo \nsrc/bootstrap.php\n podendo ser manipuladas conforme o ambiente e necessidades de seu projeto.\n\n\ndefine('DEBUG',true);\ndefine('URL_PREFIX','');\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\ndefine('ROOT_PATH',__DIR__);\ndefine('DATABASE_PATH',ROOT_PATH.'/database.json');\ndefine('DATABASE','default');\n\n\n\n\nDEBUG\n\n\ndefine('DEBUG',true);\n\n\n\n\nEnable or disable display errors.\n\n\nDefault: \ntrue\n\n\nPossible values: \ntrue\n or \nfalse\n\n\nURL_PREFIX\n\n\ndefine('URL_PREFIX','blog/');\n\n\n\n\n\u00c9 um prefixo usado para ser escapado nos acessos as URL do projeto.\n\n\nExample HTTP GET request\n\n\nGET /blog/ HTTP/1.1\n\n\n\n\nIn url.php\n\n\n// in url.php file the math ^home is valid.\n// escaped blog/\n'/^\\/home\\/?$/' =\n ['Blog/Home/index',['GET']],\n\n\n\n\nDefault: \n''\n\n\nPossible values: \nString\n\n\nREQUEST_URI\n\n\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\n\n\n\n\n\u00c9 a rota recebida, podendo ser obtida pela global \n$_SERVER['REQUEST_URI']\n do php.\n\n\nDefault: \n$_SERVER['REQUEST_URI']\n\n\nPossible values: \nString\n\n\nROOT_PATH\n\n\ndefine('ROOT_PATH',__DIR__);\n\n\n\n\nDiret\u00f3rio no qual a aplica\u00e7\u00e3o est\u00e1 rodando, podendo ser adquirida pela fun\u00e7\u00e3o \n__DIR__\n do php.\n\n\nDefault: \n__DIR__\n\n\nPossible values: \nString\n\n\nDATABASE_PATH\n\n\ndefine('DATABASE_PATH',ROOT_PATH.'/database.json');\n\n\n\n\nDiret\u00f3rio em que est\u00e1 definido o arquivo json para conex\u00e3o as bases de dados, geralmente definido como \ndatabase.json\n na pasta \nsrc/\n.\n\n\nDefault: \nROOT_PATH.'/database.json'\n\n\nPossible values: \nString[.json]\n\n\nDATABASE\n\n\ndefine('DATABASE','default');\n\n\n\n\nNome da base de dados default do projeto, definido no arquivo \ndatabase.json\n.\nExample:\n\n\n{\n    \ndefault\n: {\n        \ndriver\n: \nsqlite\n,\n        \nhost\n: \n/home/user/project/database/db_restaurant\n,\n        \nname\n: \n,\n        \nuser\n: \n,\n        \npassword\n: \n,\n        \nport\n: \n,\n        \nautocommit\n: 0,\n        \ndebug\n: 0\n    }\n}\n\n\n\n\nPossible values: \nString\n\n\nDefault: \ndefault", 
            "title": "Constants"
        }, 
        {
            "location": "/setup/constants/#constants", 
            "text": "As constants s\u00e3o todas definidas no arquivo  src/bootstrap.php  podendo ser manipuladas conforme o ambiente e necessidades de seu projeto.  define('DEBUG',true);\ndefine('URL_PREFIX','');\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\ndefine('ROOT_PATH',__DIR__);\ndefine('DATABASE_PATH',ROOT_PATH.'/database.json');\ndefine('DATABASE','default');", 
            "title": "Constants"
        }, 
        {
            "location": "/setup/constants/#debug", 
            "text": "define('DEBUG',true);  Enable or disable display errors.  Default:  true  Possible values:  true  or  false", 
            "title": "DEBUG"
        }, 
        {
            "location": "/setup/constants/#url_prefix", 
            "text": "define('URL_PREFIX','blog/');  \u00c9 um prefixo usado para ser escapado nos acessos as URL do projeto.  Example HTTP GET request  GET /blog/ HTTP/1.1  In url.php  // in url.php file the math ^home is valid.\n// escaped blog/\n'/^\\/home\\/?$/' =  ['Blog/Home/index',['GET']],  Default:  ''  Possible values:  String", 
            "title": "URL_PREFIX"
        }, 
        {
            "location": "/setup/constants/#request_uri", 
            "text": "define('REQUEST_URI',$_SERVER['REQUEST_URI']);  \u00c9 a rota recebida, podendo ser obtida pela global  $_SERVER['REQUEST_URI']  do php.  Default:  $_SERVER['REQUEST_URI']  Possible values:  String", 
            "title": "REQUEST_URI"
        }, 
        {
            "location": "/setup/constants/#root_path", 
            "text": "define('ROOT_PATH',__DIR__);  Diret\u00f3rio no qual a aplica\u00e7\u00e3o est\u00e1 rodando, podendo ser adquirida pela fun\u00e7\u00e3o  __DIR__  do php.  Default:  __DIR__  Possible values:  String", 
            "title": "ROOT_PATH"
        }, 
        {
            "location": "/setup/constants/#database_path", 
            "text": "define('DATABASE_PATH',ROOT_PATH.'/database.json');  Diret\u00f3rio em que est\u00e1 definido o arquivo json para conex\u00e3o as bases de dados, geralmente definido como  database.json  na pasta  src/ .  Default:  ROOT_PATH.'/database.json'  Possible values:  String[.json]", 
            "title": "DATABASE_PATH"
        }, 
        {
            "location": "/setup/constants/#database", 
            "text": "define('DATABASE','default');  Nome da base de dados default do projeto, definido no arquivo  database.json .\nExample:  {\n     default : {\n         driver :  sqlite ,\n         host :  /home/user/project/database/db_restaurant ,\n         name :  ,\n         user :  ,\n         password :  ,\n         port :  ,\n         autocommit : 0,\n         debug : 0\n    }\n}  Possible values:  String  Default:  default", 
            "title": "DATABASE"
        }, 
        {
            "location": "/quick_start/", 
            "text": "Quick start\n\n\nIn this section are some definitions to be respected for the correct functioning of the willer, we present the three main layers - \nModel, Controllers and View\n - in addition to working with routes in\nurl.php\n\n\nURL route\n\n\nIn root or \nsrc\n path, we have file \nurl.php\n, this URL's will be defined, the structure is as follows \napplication/controller/view\n\n\nExample:\n\n\n// url's frontend\n$URL = [\n    \n/^\\/?$/\n                     =\n [\nMyFrontend/Home/index\n,null],\n    \n/^home\\/?$/\n                 =\n [\nMyFrontend/Company/index\n,null],\n    \n/^product\\/?$/\n              =\n [\nMyFrontend/Product/index\n,null],\n    \n/^product\\/([a-z0-9]+)\\/?$/\n =\n [\nMyFrontend/Product/detail\n,null],\n    \n/^contato\\/?$/\n              =\n [\nMyFrontend/Contact/contact\n,null],\n];\n\n// ajax requests\n// limiting the request by the HTTP protocol type (REST)\n$URL += [\n    \n/^request\\/product\\/?$/\n           =\n [\nMyFrontend/Request/productList\n,[\nGET\n]],\n    \n/^request\\/product\\/([0-9]+)\\/?$/\n =\n [\nMyFrontend/Request/productDetail\n,[\nGET\n]],\n    \n/^request\\/product\\/add\\/?$/\n      =\n [\nMyFrontend/Request/productAdd\n,[\nPOST\n]],\n];\n\n// url's backend\n$URL += [\n    \n/^admin\\/?$/\n =\n [\nMyBackend/Dashboard/index\n,null],\n];\n\n// api route\n$URL += [\n    \n/^product\\/id\\/([0-9]+)\\/?$/\n =\n [\nMyApi/Product/getById\n,['GET']],\n    \n/^product\\/add\\/?$/\n          =\n [\nMyApi/Product/add\n,['POST']],\n    \n/^product\\/update\\/?$/\n       =\n [\nMyApi/Product/update\n,['POST','PUT']],\n    \n/^product\\/delete\\/?$/\n       =\n [\nMyApi/Product/delete\n,['POST']],\n];\n\n// blog\n$URL += [\n    \n/^blog\\/?$/\n            =\n [\nMyBlog/Blog/index\n,null],\n    \n/^blog\\/([\\w\\d]+)\\/?$/\n =\n [\nMyBlog/Blog/detail\n,null],\n];\n\n\n\n\n\nModel\n\n\nExemplo das tabela Pessoa e Produto que se relacionam com a tabela Compras\n\n\nCREATE TABLE `person` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `first_name`    TEXT,\n    `last_name` TEXT\n);\n\nCREATE TABLE `product` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `price` REAL NOT NULL\n);\n\nCREATE TABLE `purchase` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `person_id` INTEGER NOT NULL,\n    `product_id`    NUMERIC NOT NULL,\n    `quantity`  INTEGER NOT NULL\n);\n\n\n\n\nAgora o exemplo da estrutura dos model, conforme a entidade relacional das tabelas\n\n\nnamespace Application\\Test\\Model\\Person {\n    use \\Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nfirst_name\n =\n Model::char([\nlength\n =\n 40]),\n                \nlast_name\n =\n Model::char([\nlength\n =\n 40])];\n        }\n\n        protected function name() {\n            return \nperson\n;\n        }\n    }\n}\n\nnamespace Application\\Test\\Model\\Product {\n    use \\Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nname\n =\n Model::char([\nlength\n =\n 40]),\n                \nprice\n =\n Model::float([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \nproduct\n;\n        }\n    }\n}\n\nnamespace Application\\Test\\Model\\Purchase {\n    use \\Core\\Model;\n    use \\Application\\Test\\Model\\Person;\n    use \\Application\\Test\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nperson_id\n =\n Model::foreignKey([\ntable\n =\n new Person\\Person,\nnull\n =\n 0]),\n                \nproduct_id\n =\n Model::foreignKey([\ntable\n =\n new Product\\Product,\nnull\n =\n 0]),\n                \nquantity\n =\n Model::integer([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \npurchase\n;\n        }\n    }\n}\n\n\n\n\nController\n\n\nIn controller temos algumas simples querys\n\n\n$db_transaction = new Transaction(DB_POSTGRES);\n\n$person = new Person\\Person($db_transaction);\n$product = new Product\\Product($db_transaction);\n$purchase = new Purchase\\Purchase($db_transaction);\n\ntry {\n    $db_transaction-\nbeginTransaction();\n\n    $product-\nsave([\n        \nname\n =\n \nbeer\n,\n        \nprice\n =\n 1.99,\n        ]);\n\n    $person-\nsave([\n        \nfirst_name\n =\n \nwilian\n,\n        \nlast_name\n =\n \nborba\n,\n        ]);\n\n    // update\n    $person-\nfirst_name = \nwilliam\n;\n    $person-\nsave();\n\n    $purchase-\nsave([\n        \nperson_id\n =\n $person,\n        \nproduct_id\n =\n $product,\n        \nquantity\n =\n 3]);\n\n    $purchase_filter = $purchase\n        -\nwhere([\n            \nperson.id\n =\n $person-\nid,\n            \nproduct.name\n =\n [$product-\nname] // values arrays result in 'IN' sql operator\n            ])\n        -\norderBy([\n            \nperson.first_name\n =\n \ndesc\n\n            ])\n        -\nlimit(1,5)\n        -\nexecute([\n            \njoin\n =\n \nleft\n]);\n\n    $db_transaction-\ncommit();\n\n} catch (Exception $error) {\n    $db_transaction-\nrollBack();\n\n    throw new Exception($error);\n}\n\n/*return of purchase_filter\n\n[\n    {\n        \nid\n: \n18\n,\n        \nperson_id\n: {\n            \nid\n: \n18\n,\n            \nfirst_name\n: \nwilliam\n,\n            \nlast_name\n: \nrosa borba\n\n        },\n        \nproduct_id\n: {\n            \nid\n: \n18\n,\n            \nname\n: \nwhiskey\n,\n            \nprice\n: \n1.99\n\n        },\n        \nquantity\n: \n4\n\n    }\n]\n\n*/\n\n\n\n\nCada index da lista \u00e9 um registro mapeado, representado por um objeto da mesma entidade, contendo todas as fun\u00e7\u00f5es CRUD.\n\n\nforeach ($purchase_filter as $i =\n $purchase_obj) {\n    $purchase_obj-\nproduct_id-\nname = \nwhiskey\n;\n    $purchase_obj-\nproduct_id-\nsave();\n\n    print_r($purchase_obj-\nperson_id); // retorna o objeto Person referenciado por Purchase\n\n    $purchase_obj-\nperson_id-\nlast_name = \nrosa borba\n;\n    $purchase_obj-\nperson_id-\nsave();\n\n    $purchase_obj-\nquantity = 4;\n    $purchase_obj-\nsave();\n\n}\n\n\n\n\nPara cada query efetuada podemos a qualquer momento fazer um debug da consulta realizada.\n\n\n$purchase-\ndumpQuery();", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quick_start/#quick-start", 
            "text": "In this section are some definitions to be respected for the correct functioning of the willer, we present the three main layers -  Model, Controllers and View  - in addition to working with routes in url.php", 
            "title": "Quick start"
        }, 
        {
            "location": "/quick_start/#url-route", 
            "text": "In root or  src  path, we have file  url.php , this URL's will be defined, the structure is as follows  application/controller/view  Example:  // url's frontend\n$URL = [\n     /^\\/?$/                      =  [ MyFrontend/Home/index ,null],\n     /^home\\/?$/                  =  [ MyFrontend/Company/index ,null],\n     /^product\\/?$/               =  [ MyFrontend/Product/index ,null],\n     /^product\\/([a-z0-9]+)\\/?$/  =  [ MyFrontend/Product/detail ,null],\n     /^contato\\/?$/               =  [ MyFrontend/Contact/contact ,null],\n];\n\n// ajax requests\n// limiting the request by the HTTP protocol type (REST)\n$URL += [\n     /^request\\/product\\/?$/            =  [ MyFrontend/Request/productList ,[ GET ]],\n     /^request\\/product\\/([0-9]+)\\/?$/  =  [ MyFrontend/Request/productDetail ,[ GET ]],\n     /^request\\/product\\/add\\/?$/       =  [ MyFrontend/Request/productAdd ,[ POST ]],\n];\n\n// url's backend\n$URL += [\n     /^admin\\/?$/  =  [ MyBackend/Dashboard/index ,null],\n];\n\n// api route\n$URL += [\n     /^product\\/id\\/([0-9]+)\\/?$/  =  [ MyApi/Product/getById ,['GET']],\n     /^product\\/add\\/?$/           =  [ MyApi/Product/add ,['POST']],\n     /^product\\/update\\/?$/        =  [ MyApi/Product/update ,['POST','PUT']],\n     /^product\\/delete\\/?$/        =  [ MyApi/Product/delete ,['POST']],\n];\n\n// blog\n$URL += [\n     /^blog\\/?$/             =  [ MyBlog/Blog/index ,null],\n     /^blog\\/([\\w\\d]+)\\/?$/  =  [ MyBlog/Blog/detail ,null],\n];", 
            "title": "URL route"
        }, 
        {
            "location": "/quick_start/#model", 
            "text": "Exemplo das tabela Pessoa e Produto que se relacionam com a tabela Compras  CREATE TABLE `person` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `first_name`    TEXT,\n    `last_name` TEXT\n);\n\nCREATE TABLE `product` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `price` REAL NOT NULL\n);\n\nCREATE TABLE `purchase` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `person_id` INTEGER NOT NULL,\n    `product_id`    NUMERIC NOT NULL,\n    `quantity`  INTEGER NOT NULL\n);  Agora o exemplo da estrutura dos model, conforme a entidade relacional das tabelas  namespace Application\\Test\\Model\\Person {\n    use \\Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 first_name  =  Model::char([ length  =  40]),\n                 last_name  =  Model::char([ length  =  40])];\n        }\n\n        protected function name() {\n            return  person ;\n        }\n    }\n}\n\nnamespace Application\\Test\\Model\\Product {\n    use \\Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 name  =  Model::char([ length  =  40]),\n                 price  =  Model::float([ length  =  20])];\n        }\n\n        protected function name() {\n            return  product ;\n        }\n    }\n}\n\nnamespace Application\\Test\\Model\\Purchase {\n    use \\Core\\Model;\n    use \\Application\\Test\\Model\\Person;\n    use \\Application\\Test\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 person_id  =  Model::foreignKey([ table  =  new Person\\Person, null  =  0]),\n                 product_id  =  Model::foreignKey([ table  =  new Product\\Product, null  =  0]),\n                 quantity  =  Model::integer([ length  =  20])];\n        }\n\n        protected function name() {\n            return  purchase ;\n        }\n    }\n}", 
            "title": "Model"
        }, 
        {
            "location": "/quick_start/#controller", 
            "text": "In controller temos algumas simples querys  $db_transaction = new Transaction(DB_POSTGRES);\n\n$person = new Person\\Person($db_transaction);\n$product = new Product\\Product($db_transaction);\n$purchase = new Purchase\\Purchase($db_transaction);\n\ntry {\n    $db_transaction- beginTransaction();\n\n    $product- save([\n         name  =   beer ,\n         price  =  1.99,\n        ]);\n\n    $person- save([\n         first_name  =   wilian ,\n         last_name  =   borba ,\n        ]);\n\n    // update\n    $person- first_name =  william ;\n    $person- save();\n\n    $purchase- save([\n         person_id  =  $person,\n         product_id  =  $product,\n         quantity  =  3]);\n\n    $purchase_filter = $purchase\n        - where([\n             person.id  =  $person- id,\n             product.name  =  [$product- name] // values arrays result in 'IN' sql operator\n            ])\n        - orderBy([\n             person.first_name  =   desc \n            ])\n        - limit(1,5)\n        - execute([\n             join  =   left ]);\n\n    $db_transaction- commit();\n\n} catch (Exception $error) {\n    $db_transaction- rollBack();\n\n    throw new Exception($error);\n}\n\n/*return of purchase_filter\n\n[\n    {\n         id :  18 ,\n         person_id : {\n             id :  18 ,\n             first_name :  william ,\n             last_name :  rosa borba \n        },\n         product_id : {\n             id :  18 ,\n             name :  whiskey ,\n             price :  1.99 \n        },\n         quantity :  4 \n    }\n]\n\n*/  Cada index da lista \u00e9 um registro mapeado, representado por um objeto da mesma entidade, contendo todas as fun\u00e7\u00f5es CRUD.  foreach ($purchase_filter as $i =  $purchase_obj) {\n    $purchase_obj- product_id- name =  whiskey ;\n    $purchase_obj- product_id- save();\n\n    print_r($purchase_obj- person_id); // retorna o objeto Person referenciado por Purchase\n\n    $purchase_obj- person_id- last_name =  rosa borba ;\n    $purchase_obj- person_id- save();\n\n    $purchase_obj- quantity = 4;\n    $purchase_obj- save();\n\n}  Para cada query efetuada podemos a qualquer momento fazer um debug da consulta realizada.  $purchase- dumpQuery();", 
            "title": "Controller"
        }, 
        {
            "location": "/orm/", 
            "text": "ORM\n\n\nVamos mostrar como efetuar as principais opera\u00e7\u00f5es de banco de dados, como insert, update, delete e select.\nSer\u00e3o criados model's e controllers, com consultas semelhantes ao padr\u00e3o active record, utilizando o ORM integrado do framework.\n\n\nApplication\n\n\nA aplica\u00e7\u00e3o de exemplo ter\u00e1 o nome \nRestaurant\n, tendo um model \nRestaurant.php\n e um controller \nHome.php\n, abaixo a estrutura montada para este exemplo.\n\n\n\n\nDatabase\n\n\nCriaremos uma base de dados SQLite com as seguintes tabelas.\n\n\nCREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place` TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant`    INTEGER NOT NULL,\n    `name`  TEXT NOT NULL\n);\n\n\n\n\nArquivo src/database.json de exemplo configurado para base SQLite.\n\n\n{\n    \ndefault\n: {\n        \ndriver\n: \nsqlite\n,\n        \nhost\n: \n/home/user/project/database/db_restaurant\n,\n        \nname\n: \n,\n        \nuser\n: \n,\n        \npassword\n: \n,\n        \nport\n: \n,\n        \nautocommit\n: 0,\n        \ndebug\n: 0\n    }\n}\n\n\n\n\nURL\n\n\nO arquivo \nsrc/url.php\n ter\u00e1 o seguinte formato.\n\n\n?php\n\n$url = [\n    '/^\\/restaurant\\/add\\/?$/'        =\n ['Restaurant/Home/restaurantAdd',['GET']],\n    '/^\\/restaurant\\/update\\/?$/'     =\n ['Restaurant/Home/restaurantUpdate',['GET']],\n    '/^\\/restaurant\\/delete\\/?$/'     =\n ['Restaurant/Home/restaurantDelete',['GET']],\n    '/^\\/restaurant\\/get\\/?$/'        =\n ['Restaurant/Home/restaurantGet',['GET']],\n    '/^\\/restaurant\\/select\\/?$/'     =\n ['Restaurant/Home/restaurantSelect',['GET']],\n];\n\n\n\n\nModel\n\n\nModel \nRestaurant.php\n ter\u00e1 o seguinte formato.\n\n\n?php\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    class Restaurant extends Model {\n        public $id;\n        public $place;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'place' =\n Model::char(['length' =\n 80]),\n                'serves_hot_dogs' =\n Model::boolean(['null' =\n false]),\n                'serves_pizza' =\n Model::boolean(),];\n        }\n\n        protected function name() {\n            return \nrestaurant\n;\n        }\n    }\n}\n\n\n\n\nController\n\n\nController \nHome.php\n ter\u00e1 o seguinte formato.\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\DAO\\Transaction;\n    use \\Core\\Util;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            $this-\ndb_transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            //\n        }\n\n        public function restaurantUpdate() {\n            //\n        }\n\n        public function restaurantDelete() {\n            //\n        }\n\n        public function restaurantGet() {\n            //\n        }\n\n        public function restaurantSelect() {\n            //\n        }\n    }\n}\n\n\n\n\n\nAdd record\n\n\nO controller para adicionar registros tera o seguinte formato.\n\n\npublic function restaurantAdd() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nUpdate record\n\n\nO controller para atualizar registros tera o seguinte formato.\n\n\npublic function restaurantUpdate() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    // update\n    $restaurant-\nplace = 'bla e bla';\n    $restaurant-\nserves_hot_dogs = 0;\n    $restaurant-\nsave();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nDelete record\n\n\nO controller para deletar registros tera o seguinte formato.\n\n\npublic function restaurantDelete() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // delete all register without filter\n    // $restaurant-\ndelete();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    // delete current instance\n    $restaurant-\ndelete();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nGet record\n\n\nO controller para pegar um registro especifico tera o seguinte formato.\n\n\npublic function restaurantGet() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // get(unique)\n    $restaurant-\nget([\n        'place' =\n 'place of test']);\n\n    // delete current instance\n    // $restaurant-\ndelete();\n\n    // update\n    // $restaurant-\nplace = 'bla e bla';\n    // $restaurant-\nserves_hot_dogs = 0;\n    // $restaurant-\nsave();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nSelect record\n\n\nO controller para filtrar registros tera o seguinte formato.\n\n\npublic function restaurantSelect() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // select with where, order by, limit(pagination) and join left\n    // $restaurant_list = $restaurant\n    //     -\nwhere([\n    //         'restaurant.id' =\n [15,16],])\n    //     -\norderBy([\n    //         'restaurant.serves_pizza' =\n 'desc'])\n    //     -\nlimit(1,5)\n    //     -\nupdate([\n    //         'place' =\n 'testandiooo123654'])\n    //     -\nexecute([\n    //         'join' =\n 'left']);\n\n    // select with update and return changes\n    $restaurant_list = $restaurant\n        -\nwhere([\n            'restaurant.serves_hot_dogs' =\n [1,0],]) // id in(1,2)\n        -\norderBy([\n            'restaurant.serves_pizza' =\n 'desc'])\n        -\nlimit(1,5) // page 1 limit 5\n        -\nupdate([\n            'place' =\n 'place update yea!']) // update in current select\n        -\nexecute([\n            'join' =\n 'left']); // join left|right optional\n\n    // list of query's\n    // Util::renderToJson($restaurant-\ndumpQuery());\n\n    // render to json result\n    Util::renderToJson($restaurant_list);\n}", 
            "title": "ORM"
        }, 
        {
            "location": "/orm/#orm", 
            "text": "Vamos mostrar como efetuar as principais opera\u00e7\u00f5es de banco de dados, como insert, update, delete e select.\nSer\u00e3o criados model's e controllers, com consultas semelhantes ao padr\u00e3o active record, utilizando o ORM integrado do framework.", 
            "title": "ORM"
        }, 
        {
            "location": "/orm/#application", 
            "text": "A aplica\u00e7\u00e3o de exemplo ter\u00e1 o nome  Restaurant , tendo um model  Restaurant.php  e um controller  Home.php , abaixo a estrutura montada para este exemplo.", 
            "title": "Application"
        }, 
        {
            "location": "/orm/#database", 
            "text": "Criaremos uma base de dados SQLite com as seguintes tabelas.  CREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place` TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant`    INTEGER NOT NULL,\n    `name`  TEXT NOT NULL\n);  Arquivo src/database.json de exemplo configurado para base SQLite.  {\n     default : {\n         driver :  sqlite ,\n         host :  /home/user/project/database/db_restaurant ,\n         name :  ,\n         user :  ,\n         password :  ,\n         port :  ,\n         autocommit : 0,\n         debug : 0\n    }\n}", 
            "title": "Database"
        }, 
        {
            "location": "/orm/#url", 
            "text": "O arquivo  src/url.php  ter\u00e1 o seguinte formato.  ?php\n\n$url = [\n    '/^\\/restaurant\\/add\\/?$/'        =  ['Restaurant/Home/restaurantAdd',['GET']],\n    '/^\\/restaurant\\/update\\/?$/'     =  ['Restaurant/Home/restaurantUpdate',['GET']],\n    '/^\\/restaurant\\/delete\\/?$/'     =  ['Restaurant/Home/restaurantDelete',['GET']],\n    '/^\\/restaurant\\/get\\/?$/'        =  ['Restaurant/Home/restaurantGet',['GET']],\n    '/^\\/restaurant\\/select\\/?$/'     =  ['Restaurant/Home/restaurantSelect',['GET']],\n];", 
            "title": "URL"
        }, 
        {
            "location": "/orm/#model", 
            "text": "Model  Restaurant.php  ter\u00e1 o seguinte formato.  ?php\nnamespace Application\\Restaurant\\Model {\n    use \\Core\\Model;\n    class Restaurant extends Model {\n        public $id;\n        public $place;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'place' =  Model::char(['length' =  80]),\n                'serves_hot_dogs' =  Model::boolean(['null' =  false]),\n                'serves_pizza' =  Model::boolean(),];\n        }\n\n        protected function name() {\n            return  restaurant ;\n        }\n    }\n}", 
            "title": "Model"
        }, 
        {
            "location": "/orm/#controller", 
            "text": "Controller  Home.php  ter\u00e1 o seguinte formato.  ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\DAO\\Transaction;\n    use \\Core\\Util;\n    use \\Application\\Restaurant\\Model\\Restaurant;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            $this- db_transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            //\n        }\n\n        public function restaurantUpdate() {\n            //\n        }\n\n        public function restaurantDelete() {\n            //\n        }\n\n        public function restaurantGet() {\n            //\n        }\n\n        public function restaurantSelect() {\n            //\n        }\n    }\n}  Add record  O controller para adicionar registros tera o seguinte formato.  public function restaurantAdd() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    Util::renderToJson($restaurant);\n}  Update record  O controller para atualizar registros tera o seguinte formato.  public function restaurantUpdate() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    // update\n    $restaurant- place = 'bla e bla';\n    $restaurant- serves_hot_dogs = 0;\n    $restaurant- save();\n\n    Util::renderToJson($restaurant);\n}  Delete record  O controller para deletar registros tera o seguinte formato.  public function restaurantDelete() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // delete all register without filter\n    // $restaurant- delete();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    // delete current instance\n    $restaurant- delete();\n\n    Util::renderToJson($restaurant);\n}  Get record  O controller para pegar um registro especifico tera o seguinte formato.  public function restaurantGet() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // get(unique)\n    $restaurant- get([\n        'place' =  'place of test']);\n\n    // delete current instance\n    // $restaurant- delete();\n\n    // update\n    // $restaurant- place = 'bla e bla';\n    // $restaurant- serves_hot_dogs = 0;\n    // $restaurant- save();\n\n    Util::renderToJson($restaurant);\n}  Select record  O controller para filtrar registros tera o seguinte formato.  public function restaurantSelect() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // select with where, order by, limit(pagination) and join left\n    // $restaurant_list = $restaurant\n    //     - where([\n    //         'restaurant.id' =  [15,16],])\n    //     - orderBy([\n    //         'restaurant.serves_pizza' =  'desc'])\n    //     - limit(1,5)\n    //     - update([\n    //         'place' =  'testandiooo123654'])\n    //     - execute([\n    //         'join' =  'left']);\n\n    // select with update and return changes\n    $restaurant_list = $restaurant\n        - where([\n            'restaurant.serves_hot_dogs' =  [1,0],]) // id in(1,2)\n        - orderBy([\n            'restaurant.serves_pizza' =  'desc'])\n        - limit(1,5) // page 1 limit 5\n        - update([\n            'place' =  'place update yea!']) // update in current select\n        - execute([\n            'join' =  'left']); // join left|right optional\n\n    // list of query's\n    // Util::renderToJson($restaurant- dumpQuery());\n\n    // render to json result\n    Util::renderToJson($restaurant_list);\n}", 
            "title": "Controller"
        }, 
        {
            "location": "/twig/", 
            "text": "Twig template engine\n\n\nVamos demonstrar como utilizar a biblioteca Twig para criar os templates nas views do willer framework. Para saber mais sobre o \nTwig\n acesse a documenta\u00e7\u00e3o no site oficial.\n\n\nInstalation\n\n\nInstale o willer e logo em seguida a lib twig utilizando o composer.\n\n\ncomposer create-project wborba/willer\n\n\ncomposer require twig/twig\n\n\nURL\n\n\nO arquivo \nsrc/url.php\n ter\u00e1 o seguinte formato.\n\n\n?php\n\n$url = [\n    '/^\\/?$/'          =\n ['Restaurant/Home/home',['GET']],\n    '/^\\/home\\/?$/'    =\n ['Restaurant/Home/home',['GET']],\n    '/^\\/contact\\/?$/' =\n ['Restaurant/Contact/contact',['GET','POST']],\n];\n\n\n\n\nController\n\n\nController \nHome.php\n ter\u00e1 o seguinte formato.\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\Util;\n\n    class Home extends Controller {\n\n        public function home() {\n            //\n        }\n    }\n}\n\n\n\n\n\nController \nContact.php\n ter\u00e1 o seguinte formato.\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\Util;\n\n    class Contact extends Controller {\n\n        public function contact() {\n            //\n        }\n    }\n}\n\n\n\n\n\nView", 
            "title": "Twig [working]"
        }, 
        {
            "location": "/twig/#twig-template-engine", 
            "text": "Vamos demonstrar como utilizar a biblioteca Twig para criar os templates nas views do willer framework. Para saber mais sobre o  Twig  acesse a documenta\u00e7\u00e3o no site oficial.", 
            "title": "Twig template engine"
        }, 
        {
            "location": "/twig/#instalation", 
            "text": "Instale o willer e logo em seguida a lib twig utilizando o composer.  composer create-project wborba/willer  composer require twig/twig", 
            "title": "Instalation"
        }, 
        {
            "location": "/twig/#url", 
            "text": "O arquivo  src/url.php  ter\u00e1 o seguinte formato.  ?php\n\n$url = [\n    '/^\\/?$/'          =  ['Restaurant/Home/home',['GET']],\n    '/^\\/home\\/?$/'    =  ['Restaurant/Home/home',['GET']],\n    '/^\\/contact\\/?$/' =  ['Restaurant/Contact/contact',['GET','POST']],\n];", 
            "title": "URL"
        }, 
        {
            "location": "/twig/#controller", 
            "text": "Controller  Home.php  ter\u00e1 o seguinte formato.  ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\Util;\n\n    class Home extends Controller {\n\n        public function home() {\n            //\n        }\n    }\n}  Controller  Contact.php  ter\u00e1 o seguinte formato.  ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use \\Core\\Controller;\n    use \\Core\\Util;\n\n    class Contact extends Controller {\n\n        public function contact() {\n            //\n        }\n    }\n}", 
            "title": "Controller"
        }, 
        {
            "location": "/twig/#view", 
            "text": "", 
            "title": "View"
        }
    ]
}