{
    "docs": [
        {
            "location": "/", 
            "text": "Willer Framework\n\n\nWiller is a PHP framework, it was created based on ideas coming from other frameworks like Django(python), Codeigniter(php) and ZendFramework(php).\n\n\nRequisites \n Dependencies\n\n\n\n\nPHP \n= 5.6(compatible with php7)\n\n\nWhoops - php errors for cool kids\n\n\nPHPUnit - The PHP Testing Framework(require-dev)\n\n\nRelease - PHP library to increment package version and release project(require-dev)\n\n\n\n\nFeatures\n\n\n\n\nORM\n\n\nMVC\n\n\nRun immediately, php server built-in integrated, like \n./runserver.sh\n\n\nBundle\n\n\n\n\nDownload \n Install\n\n\n\n\nGIT: \ngit clone\n the \nGitHub project page\n\n\nComposer: \ncomposer create-project wborba/willer\n\n\n\n\nHighlights\n\n\nRoutes\n\n\nRoutes in single file \nApplication/Restaurant/Url.php\n. Example.\n\n\n?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                \n/^\\/?$/\n                     =\n [\nRestaurant/Home/index\n,null],\n                \n/^home\\/?$/\n                 =\n [\nRestaurant/Company/index\n,null],\n                \n/^product\\/?$/\n              =\n [\nRestaurant/Product/index\n,null],\n                \n/^product\\/([a-z0-9]+)\\/?$/\n =\n [\nRestaurant/Product/detail\n,null],\n                \n/^contato\\/?$/\n              =\n [\nRestaurant/Contact/contact\n,null],\n            ];\n        }\n    }\n}\n\n\n\n\nModels\n\n\nModels Django like style.\n\n\nExample sql.\n\n\nCREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place_id`  TEXT,\n    `name`  TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL,\n    FOREIGN KEY(`place_id`) REFERENCES place\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant_id` INTEGER,\n    `name`  TEXT NOT NULL,\n    FOREIGN KEY(`restaurant_id`) REFERENCES restaurant\n);\n\n\n\n\nExample model class Place, Restaurant and Waiter.\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Place.php\n\n\nApplication\\Restaurant\\Model\\Place\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n\n    class Place extends Model {\n        public $id;\n        public $name;\n        public $address;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'name' =\n Model::char(['length' =\n 40]),\n                'address' =\n Model::char(['length' =\n 40]),];\n        }\n\n        protected function name() {\n            return 'place';\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Restaurant.php\n\n\nApplication\\Restaurant\\Model\\Restaurant\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Place;\n\n    class Restaurant extends Model {\n        public $id;\n        public $place_id;\n        public $name;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'place_id' =\n Model::foreignKey(['table' =\n new Place,'null' =\n true]),\n                'name' =\n Model::char(['length' =\n 40]),\n                'serves_hot_dogs' =\n Model::boolean(['null' =\n false]),\n                'serves_pizza' =\n Model::boolean(['null' =\n false]),];\n        }\n\n        protected function name() {\n            return 'restaurant';\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Model/Waiter.php\n\n\nApplication\\Restaurant\\Model\\Waiter\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Restaurant;\n\n    class Waiter extends Model {\n        public $id;\n        public $restaurant_id;\n        public $name;\n\n        protected function schema() {\n            return [\n                'id' =\n Model::primaryKey(),\n                'restaurant_id' =\n Model::foreignKey(['table' =\n new Restaurant,'null' =\n true]),\n                'name' =\n Model::char(['length' =\n 40]),];\n        }\n\n        protected function name() {\n            return 'waiter';\n        }\n    }\n}\n\n\n\n\nController\n\n\nORM engine.\n\n\nController \nHome.php\n with method/view \nrestaurantAdd\n contains transaction example.\n\n\n\n\n\n\n\n\nFile\n\n\nNamespace/Class\n\n\n\n\n\n\n\n\n\n\nApplication/Restaurant/Controller/Home.php\n\n\nApplication\\Restaurant\\Controller\\Home\n\n\n\n\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Place;\n    use Application\\Restaurant\\Model\\Restaurant;\n    use Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this-\ntransaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ntransaction);\n            $place = new Place($this-\ntransaction);\n            $waiter = new Waiter($this-\ntransaction);\n\n            try {\n                // open connection with begin transaction\n                $this-\ntransaction-\nbeginTransaction();\n\n                // save place\n                $place-\nsave([\n                    'name' =\n 'place name test',\n                    'address' =\n 'place address test',]);\n\n                // save restaurant\n                $restaurant-\nsave([\n                    'place_id' =\n $place,\n                    'name' =\n 'restaurant name test',\n                    'serves_hot_dogs' =\n 1,\n                    'serves_pizza' =\n 1,]);\n\n                // save waiter\n                $waiter-\nsave([\n                    'restaurant_id' =\n $restaurant,\n                    'name' =\n 'waiter name test']);\n\n                // commit\n                $this-\ntransaction-\ncommit();\n\n            } catch (Exception $error) {\n                // rollBack\n                $this-\ntransaction-\nrollBack();\n            }\n        }\n    }\n}\n\n\n\n\nRetrieve query's history in real time.\n\n\n// return restaurant query's\n$restaurant-\ndumpQuery();\n\n// return place query's\n$place-\ndumpQuery();\n\n// return waiter query's\n$waiter-\ndumpQuery();\n\n\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.", 
            "title": "Index"
        }, 
        {
            "location": "/#willer-framework", 
            "text": "Willer is a PHP framework, it was created based on ideas coming from other frameworks like Django(python), Codeigniter(php) and ZendFramework(php).", 
            "title": "Willer Framework"
        }, 
        {
            "location": "/#requisites-dependencies", 
            "text": "PHP  = 5.6(compatible with php7)  Whoops - php errors for cool kids  PHPUnit - The PHP Testing Framework(require-dev)  Release - PHP library to increment package version and release project(require-dev)", 
            "title": "Requisites &amp; Dependencies"
        }, 
        {
            "location": "/#features", 
            "text": "ORM  MVC  Run immediately, php server built-in integrated, like  ./runserver.sh  Bundle", 
            "title": "Features"
        }, 
        {
            "location": "/#download-install", 
            "text": "GIT:  git clone  the  GitHub project page  Composer:  composer create-project wborba/willer", 
            "title": "Download &amp; Install"
        }, 
        {
            "location": "/#highlights", 
            "text": "", 
            "title": "Highlights"
        }, 
        {
            "location": "/#routes", 
            "text": "Routes in single file  Application/Restaurant/Url.php . Example.  ?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                 /^\\/?$/                      =  [ Restaurant/Home/index ,null],\n                 /^home\\/?$/                  =  [ Restaurant/Company/index ,null],\n                 /^product\\/?$/               =  [ Restaurant/Product/index ,null],\n                 /^product\\/([a-z0-9]+)\\/?$/  =  [ Restaurant/Product/detail ,null],\n                 /^contato\\/?$/               =  [ Restaurant/Contact/contact ,null],\n            ];\n        }\n    }\n}", 
            "title": "Routes"
        }, 
        {
            "location": "/#models", 
            "text": "Models Django like style.  Example sql.  CREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place_id`  TEXT,\n    `name`  TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL,\n    FOREIGN KEY(`place_id`) REFERENCES place\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant_id` INTEGER,\n    `name`  TEXT NOT NULL,\n    FOREIGN KEY(`restaurant_id`) REFERENCES restaurant\n);  Example model class Place, Restaurant and Waiter.     File  Namespace/Class      Application/Restaurant/Model/Place.php  Application\\Restaurant\\Model\\Place     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n\n    class Place extends Model {\n        public $id;\n        public $name;\n        public $address;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'name' =  Model::char(['length' =  40]),\n                'address' =  Model::char(['length' =  40]),];\n        }\n\n        protected function name() {\n            return 'place';\n        }\n    }\n}     File  Namespace/Class      Application/Restaurant/Model/Restaurant.php  Application\\Restaurant\\Model\\Restaurant     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Place;\n\n    class Restaurant extends Model {\n        public $id;\n        public $place_id;\n        public $name;\n        public $serves_hot_dogs;\n        public $serves_pizza;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'place_id' =  Model::foreignKey(['table' =  new Place,'null' =  true]),\n                'name' =  Model::char(['length' =  40]),\n                'serves_hot_dogs' =  Model::boolean(['null' =  false]),\n                'serves_pizza' =  Model::boolean(['null' =  false]),];\n        }\n\n        protected function name() {\n            return 'restaurant';\n        }\n    }\n}     File  Namespace/Class      Application/Restaurant/Model/Waiter.php  Application\\Restaurant\\Model\\Waiter     ?php\n\nnamespace Application\\Restaurant\\Model {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Restaurant;\n\n    class Waiter extends Model {\n        public $id;\n        public $restaurant_id;\n        public $name;\n\n        protected function schema() {\n            return [\n                'id' =  Model::primaryKey(),\n                'restaurant_id' =  Model::foreignKey(['table' =  new Restaurant,'null' =  true]),\n                'name' =  Model::char(['length' =  40]),];\n        }\n\n        protected function name() {\n            return 'waiter';\n        }\n    }\n}", 
            "title": "Models"
        }, 
        {
            "location": "/#controller", 
            "text": "ORM engine.  Controller  Home.php  with method/view  restaurantAdd  contains transaction example.     File  Namespace/Class      Application/Restaurant/Controller/Home.php  Application\\Restaurant\\Controller\\Home     ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Place;\n    use Application\\Restaurant\\Model\\Restaurant;\n    use Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this- transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- transaction);\n            $place = new Place($this- transaction);\n            $waiter = new Waiter($this- transaction);\n\n            try {\n                // open connection with begin transaction\n                $this- transaction- beginTransaction();\n\n                // save place\n                $place- save([\n                    'name' =  'place name test',\n                    'address' =  'place address test',]);\n\n                // save restaurant\n                $restaurant- save([\n                    'place_id' =  $place,\n                    'name' =  'restaurant name test',\n                    'serves_hot_dogs' =  1,\n                    'serves_pizza' =  1,]);\n\n                // save waiter\n                $waiter- save([\n                    'restaurant_id' =  $restaurant,\n                    'name' =  'waiter name test']);\n\n                // commit\n                $this- transaction- commit();\n\n            } catch (Exception $error) {\n                // rollBack\n                $this- transaction- rollBack();\n            }\n        }\n    }\n}  Retrieve query's history in real time.  // return restaurant query's\n$restaurant- dumpQuery();\n\n// return place query's\n$place- dumpQuery();\n\n// return waiter query's\n$waiter- dumpQuery();", 
            "title": "Controller"
        }, 
        {
            "location": "/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.", 
            "title": "License"
        }, 
        {
            "location": "/setup/configuration/", 
            "text": "Configuration\n\n\nFor running, open the console and runner file with command \n./runserver.sh\n in the directory where the project.\n\nWiller\n not need a web server to run, taking advantage of the built-in php service.\n\n\nRequisites \n Dependencies\n\n\n\n\nPHP \n= 5.6(compatible with php7)\n\n\nWhoops - php errors for cool kids\n\n\nPHPUnit - The PHP Testing Framework(require-dev)\n\n\nRelease - PHP library to increment package version and release project(require-dev)\n\n\n\n\nDownload \n Install\n\n\nCan be install for GitHub or Composer.\n\n\n\n\nGIT: \ngit clone\n the \nGitHub project page\n\n\nComposer: \ncomposer create-project wborba/willer\n\n\n\n\nPHP server built-in\n\n\nExecute command \n./runserver.sh\n\n\nNginx + php5-fpm\n\n\nEnable URL rewrite(is required), on file \ndefault\n and also in other in your sites-avaliable path.\n\n\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    server_name localhost;\n\n    location / {\n            autoindex on;\n    }\n\n    location /willer {\n            rewrite ^/willer/(.*) /willer/src/bootstrap.php;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|woff2)$ {\n            expires max;\n            log_not_found off;\n    }\n\n    location ~ \\.php$ {\n            include snippets/fastcgi-php.conf;\n            fastcgi_pass unix:/var/run/php5-fpm.sock;\n    }\n}\n\n\n\n\nreplace \nwiller\n by the path where its application will run.\nThe \nbootstrap.php\n file is ha index for willer.\n\n\nLicense\n\n\nThe MIT License (MIT). Please see \nLicense File\n for more information.", 
            "title": "Configuration"
        }, 
        {
            "location": "/setup/configuration/#configuration", 
            "text": "For running, open the console and runner file with command  ./runserver.sh  in the directory where the project. Willer  not need a web server to run, taking advantage of the built-in php service.", 
            "title": "Configuration"
        }, 
        {
            "location": "/setup/configuration/#requisites-dependencies", 
            "text": "PHP  = 5.6(compatible with php7)  Whoops - php errors for cool kids  PHPUnit - The PHP Testing Framework(require-dev)  Release - PHP library to increment package version and release project(require-dev)", 
            "title": "Requisites &amp; Dependencies"
        }, 
        {
            "location": "/setup/configuration/#download-install", 
            "text": "Can be install for GitHub or Composer.   GIT:  git clone  the  GitHub project page  Composer:  composer create-project wborba/willer", 
            "title": "Download &amp; Install"
        }, 
        {
            "location": "/setup/configuration/#php-server-built-in", 
            "text": "Execute command  ./runserver.sh", 
            "title": "PHP server built-in"
        }, 
        {
            "location": "/setup/configuration/#nginx-php5-fpm", 
            "text": "Enable URL rewrite(is required), on file  default  and also in other in your sites-avaliable path.  server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    root /var/www/html;\n\n    index index.php index.html index.htm index.nginx-debian.html;\n\n    server_name localhost;\n\n    location / {\n            autoindex on;\n    }\n\n    location /willer {\n            rewrite ^/willer/(.*) /willer/src/bootstrap.php;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|woff2)$ {\n            expires max;\n            log_not_found off;\n    }\n\n    location ~ \\.php$ {\n            include snippets/fastcgi-php.conf;\n            fastcgi_pass unix:/var/run/php5-fpm.sock;\n    }\n}  replace  willer  by the path where its application will run.\nThe  bootstrap.php  file is ha index for willer.", 
            "title": "Nginx + php5-fpm"
        }, 
        {
            "location": "/setup/configuration/#license", 
            "text": "The MIT License (MIT). Please see  License File  for more information.", 
            "title": "License"
        }, 
        {
            "location": "/setup/constants/", 
            "text": "Constants\n\n\nThe constants are defined in file \nsrc/bootstrap.php\n, it can be manipuled according to the environment and needs of your project.\n\n\ndefine('DEBUG',true);\ndefine('URL_PREFIX','');\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\ndefine('ROOT_PATH',__DIR__);\ndefine('DATABASE_PATH',ROOT_PATH.'/Config/database.json');\ndefine('DATABASE','default');\n\n\n\n\nDEBUG\n\n\ndefine('DEBUG',true);\n\n\n\n\nEnable or disable display errors.\n\n\nDefault: \ntrue\n\n\nPossible values: \ntrue\n or \nfalse\n\n\nURL_PREFIX\n\n\ndefine('URL_PREFIX','blog/');\n\n\n\n\n\u00c9 um prefixo usado para ser escapado nos acessos as URL do projeto.\n\n\nExample HTTP GET request\n\n\nGET /blog/ HTTP/1.1\n\n\n\n\nIn url.php\n\n\n// in url.php file the math ^home is valid.\n// escaped blog/\n'/^\\/home\\/?$/' =\n ['Blog/Home/index',['GET']],\n\n\n\n\nDefault: \n''\n\n\nPossible values: \nString\n\n\nREQUEST_URI\n\n\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\n\n\n\n\n\u00c9 a rota recebida, podendo ser obtida pela global \n$_SERVER['REQUEST_URI']\n do php.\n\n\nDefault: \n$_SERVER['REQUEST_URI']\n\n\nPossible values: \nString\n\n\nROOT_PATH\n\n\ndefine('ROOT_PATH',__DIR__);\n\n\n\n\nDiret\u00f3rio no qual a aplica\u00e7\u00e3o est\u00e1 rodando, podendo ser adquirida pela fun\u00e7\u00e3o \n__DIR__\n do php.\n\n\nDefault: \n__DIR__\n\n\nPossible values: \nString\n\n\nDATABASE_PATH\n\n\ndefine('DATABASE_PATH',ROOT_PATH.'/database.json');\n\n\n\n\nDiret\u00f3rio em que est\u00e1 definido o arquivo json para conex\u00e3o as bases de dados, geralmente definido como \ndatabase.json\n na pasta \nsrc/\n.\n\n\nDefault: \nROOT_PATH.'/database.json'\n\n\nPossible values: \nString[.json]\n\n\nDATABASE\n\n\ndefine('DATABASE','default');\n\n\n\n\nNome da base de dados default do projeto, definido no arquivo \ndatabase.json\n.\nExample:\n\n\n{\n    \ndefault\n: {\n        \ndriver\n: \nsqlite\n,\n        \nhost\n: \n/home/user/project/database/db_restaurant\n,\n        \nname\n: \n,\n        \nuser\n: \n,\n        \npassword\n: \n,\n        \nport\n: \n,\n        \nautocommit\n: 0,\n        \ndebug\n: 0\n    }\n}\n\n\n\n\nPossible values: \nString\n\n\nDefault: \ndefault", 
            "title": "Constants"
        }, 
        {
            "location": "/setup/constants/#constants", 
            "text": "The constants are defined in file  src/bootstrap.php , it can be manipuled according to the environment and needs of your project.  define('DEBUG',true);\ndefine('URL_PREFIX','');\ndefine('REQUEST_URI',$_SERVER['REQUEST_URI']);\ndefine('ROOT_PATH',__DIR__);\ndefine('DATABASE_PATH',ROOT_PATH.'/Config/database.json');\ndefine('DATABASE','default');", 
            "title": "Constants"
        }, 
        {
            "location": "/setup/constants/#debug", 
            "text": "define('DEBUG',true);  Enable or disable display errors.  Default:  true  Possible values:  true  or  false", 
            "title": "DEBUG"
        }, 
        {
            "location": "/setup/constants/#url_prefix", 
            "text": "define('URL_PREFIX','blog/');  \u00c9 um prefixo usado para ser escapado nos acessos as URL do projeto.  Example HTTP GET request  GET /blog/ HTTP/1.1  In url.php  // in url.php file the math ^home is valid.\n// escaped blog/\n'/^\\/home\\/?$/' =  ['Blog/Home/index',['GET']],  Default:  ''  Possible values:  String", 
            "title": "URL_PREFIX"
        }, 
        {
            "location": "/setup/constants/#request_uri", 
            "text": "define('REQUEST_URI',$_SERVER['REQUEST_URI']);  \u00c9 a rota recebida, podendo ser obtida pela global  $_SERVER['REQUEST_URI']  do php.  Default:  $_SERVER['REQUEST_URI']  Possible values:  String", 
            "title": "REQUEST_URI"
        }, 
        {
            "location": "/setup/constants/#root_path", 
            "text": "define('ROOT_PATH',__DIR__);  Diret\u00f3rio no qual a aplica\u00e7\u00e3o est\u00e1 rodando, podendo ser adquirida pela fun\u00e7\u00e3o  __DIR__  do php.  Default:  __DIR__  Possible values:  String", 
            "title": "ROOT_PATH"
        }, 
        {
            "location": "/setup/constants/#database_path", 
            "text": "define('DATABASE_PATH',ROOT_PATH.'/database.json');  Diret\u00f3rio em que est\u00e1 definido o arquivo json para conex\u00e3o as bases de dados, geralmente definido como  database.json  na pasta  src/ .  Default:  ROOT_PATH.'/database.json'  Possible values:  String[.json]", 
            "title": "DATABASE_PATH"
        }, 
        {
            "location": "/setup/constants/#database", 
            "text": "define('DATABASE','default');  Nome da base de dados default do projeto, definido no arquivo  database.json .\nExample:  {\n     default : {\n         driver :  sqlite ,\n         host :  /home/user/project/database/db_restaurant ,\n         name :  ,\n         user :  ,\n         password :  ,\n         port :  ,\n         autocommit : 0,\n         debug : 0\n    }\n}  Possible values:  String  Default:  default", 
            "title": "DATABASE"
        }, 
        {
            "location": "/quick_start/", 
            "text": "Quick start\n\n\nIn this section are some definitions to be respected for the correct functioning of the willer, we present the three main layers - \nModel, Controllers and View\n - in addition to working with routes in \nUrl.php\n\n\nCreate the Bundle\n\n\nIn directory \nsrc/Application/\n create the new \nBundle\n app, this example will be created the bundle name \nRestaurant\n.\n\n\nThen create the folders \nController\n, \nModel\n, \nview\n(or \ntemplate\n) and the file \nUrl.php\n.\n\n\nOk, bundle created.\n\n\n\n\nRemains only registering this new bundle in \nsrc/Config/app.json\n file, as shown below:\n\n\n[\n    \nRestaurant\n\n]\n\n\n\n\nWhenever you create or require (composer require) a new bundle to the willer, you must register this \napp.json\n the name of the bundle or application.\nEx:\n\n\n[\n    \nRestaurant\n,\n    \nFooBundle\n,\n    \nFoo\n,\n]\n\n\n\n\n\n\nURL route\n\n\nFor each bundle, there must be a \nUrl\n class, it must contain a method \n::url()\n,\nwhich is invoked statically internally by core Willer,\nis an example of \nUrl.php\n file, the bundle \nRestaurant\n created earlier.\n\n\nFile \nApplication/Restaurant/Url.php\n\n\n?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                '/^\\/?$/'                         =\n [\nRestaurant/Home/home\n,['GET']],\n                '/^\\/home\\/?$/'                   =\n [\nRestaurant/Home/home\n,['GET']],\n                '/^\\/contact\\/?$/'                =\n [\nRestaurant/Contact/contact\n,['GET']],\n                '/^\\/restaurant\\/add\\/?$/'        =\n ['Restaurant/Home/restaurantAdd',['GET']],\n                '/^\\/restaurant\\/update\\/?$/'     =\n ['Restaurant/Home/restaurantUpdate',['GET']],\n                '/^\\/restaurant\\/delete\\/?$/'     =\n ['Restaurant/Home/restaurantDelete',['GET']],\n                '/^\\/restaurant\\/get\\/?$/'        =\n ['Restaurant/Home/restaurantGet',['GET']],\n                '/^\\/restaurant\\/select\\/?$/'     =\n ['Restaurant/Home/restaurantSelect',['GET']],\n                '/^\\/restaurant\\/other-page\\/?$/' =\n ['Restaurant/Home/otherView',['GET']],\n            ];\n        }\n    }\n}\n\n\n\n\nModel\n\n\nExample of table Person, Product and Purchase, with relationship.\n\n\nCREATE TABLE `person` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `first_name`    TEXT,\n    `last_name` TEXT\n);\n\nCREATE TABLE `product` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `price` REAL NOT NULL\n);\n\nCREATE TABLE `purchase` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `person_id` INTEGER NOT NULL,\n    `product_id`    NUMERIC NOT NULL,\n    `quantity`  INTEGER NOT NULL\n);\n\n\n\n\nThe model will be created in the \nRestaurant\n bundle, in the \nModel\n folder, accordance with SQL entities listed above.\n\n\nnamespace Application\\Restaurant\\Model\\Person {\n    use Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nfirst_name\n =\n Model::char([\nlength\n =\n 40]),\n                \nlast_name\n =\n Model::char([\nlength\n =\n 40])];\n        }\n\n        protected function name() {\n            return \nperson\n;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Product {\n    use Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nname\n =\n Model::char([\nlength\n =\n 40]),\n                \nprice\n =\n Model::float([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \nproduct\n;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Purchase {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Person;\n    use Application\\Restaurant\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nperson_id\n =\n Model::foreignKey([\ntable\n =\n new Person\\Person,\nnull\n =\n 0]),\n                \nproduct_id\n =\n Model::foreignKey([\ntable\n =\n new Product\\Product,\nnull\n =\n 0]),\n                \nquantity\n =\n Model::integer([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \npurchase\n;\n        }\n    }\n}\n\n\n\n\nController\n\n\nThe controller will create a \nHome.php\n name file, it will contain some actions,\nthat will be accessed by routes previously registered at class \nUrl\n.\n\n\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Restaurant;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this-\ndb_transaction = new Transaction();\n        }\n\n        public function home() {\n            print 'home page';\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ndb_transaction);\n\n            // open connection\n            $this-\ndb_transaction-\nconnect();\n\n            // save\n            $restaurant-\nsave([\n                'name' =\n 'place of test',\n                'serves_hot_dogs' =\n 1,\n                'serves_pizza' =\n 1,]);\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantUpdate() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ndb_transaction);\n\n            // open connection\n            $this-\ndb_transaction-\nconnect();\n\n            // save\n            $restaurant-\nsave([\n                'name' =\n 'place of test',\n                'serves_hot_dogs' =\n 1,\n                'serves_pizza' =\n 1,]);\n\n            // update\n            $restaurant-\nplace = 'bla e bla';\n            $restaurant-\nserves_hot_dogs = 0;\n            $restaurant-\nsave();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantDelete() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ndb_transaction);\n\n            // open connection\n            $this-\ndb_transaction-\nconnect();\n\n            // delete all register without filter\n            // $restaurant-\ndelete();\n\n            // save\n            $restaurant-\nsave([\n                'name' =\n 'place of test',\n                'serves_hot_dogs' =\n 1,\n                'serves_pizza' =\n 1,]);\n\n            // delete current instance\n            $restaurant-\ndelete();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantGet() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ndb_transaction);\n\n            // open connection\n            $this-\ndb_transaction-\nconnect();\n\n            // get(unique)\n            $restaurant-\nget([\n                'name' =\n 'place of test']);\n\n            // delete current instance\n            // $restaurant-\ndelete();\n\n            // update\n            // $restaurant-\nname = 'bla e bla';\n            // $restaurant-\nserves_hot_dogs = 0;\n            // $restaurant-\nsave();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantSelect() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this-\ndb_transaction);\n\n            // open connection\n            $this-\ndb_transaction-\nconnect();\n\n            // select with where, order by, limit(pagination) and join left\n            // $restaurant_list = $restaurant\n            //     -\nwhere([\n            //         'restaurant.id' =\n [15,16],])\n            //     -\norderBy([\n            //         'restaurant.serves_pizza' =\n 'desc'])\n            //     -\nlimit(1,5)\n            //     -\nexecute([\n            //         'join' =\n 'left']);\n\n            // select with update and return changes\n            $restaurant_list = $restaurant\n                -\nwhere([\n                    'restaurant.serves_hot_dogs' =\n [1,0],]) // id in(1,2)\n                -\norderBy([\n                    'restaurant.serves_pizza' =\n 'desc'])\n                -\nlimit(1,5) // page 1 limit 5\n                -\nupdate([\n                    'name' =\n 'place update yea!']) // update in current select\n                -\nexecute([\n                    'join' =\n 'left']); // join left|right optional\n\n            // list of query's\n            // Util::renderToJson($restaurant-\ndumpQuery());\n\n            // render to json result\n            Util::renderToJson($restaurant_list);\n        }\n    }\n}\n\n\n\n\nView or Template\n\n\nIn view folder (or template), the static files(html, js, css, jpg, etc) will be stored.\nYou can feel free to use engine templates, eg \nTwig\n.\nOr create something amazing with angular.js\n\n\nThank you.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quick_start/#quick-start", 
            "text": "In this section are some definitions to be respected for the correct functioning of the willer, we present the three main layers -  Model, Controllers and View  - in addition to working with routes in  Url.php", 
            "title": "Quick start"
        }, 
        {
            "location": "/quick_start/#create-the-bundle", 
            "text": "In directory  src/Application/  create the new  Bundle  app, this example will be created the bundle name  Restaurant .  Then create the folders  Controller ,  Model ,  view (or  template ) and the file  Url.php .  Ok, bundle created.   Remains only registering this new bundle in  src/Config/app.json  file, as shown below:  [\n     Restaurant \n]  Whenever you create or require (composer require) a new bundle to the willer, you must register this  app.json  the name of the bundle or application.\nEx:  [\n     Restaurant ,\n     FooBundle ,\n     Foo ,\n]", 
            "title": "Create the Bundle"
        }, 
        {
            "location": "/quick_start/#url-route", 
            "text": "For each bundle, there must be a  Url  class, it must contain a method  ::url() ,\nwhich is invoked statically internally by core Willer,\nis an example of  Url.php  file, the bundle  Restaurant  created earlier.  File  Application/Restaurant/Url.php  ?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                '/^\\/?$/'                         =  [ Restaurant/Home/home ,['GET']],\n                '/^\\/home\\/?$/'                   =  [ Restaurant/Home/home ,['GET']],\n                '/^\\/contact\\/?$/'                =  [ Restaurant/Contact/contact ,['GET']],\n                '/^\\/restaurant\\/add\\/?$/'        =  ['Restaurant/Home/restaurantAdd',['GET']],\n                '/^\\/restaurant\\/update\\/?$/'     =  ['Restaurant/Home/restaurantUpdate',['GET']],\n                '/^\\/restaurant\\/delete\\/?$/'     =  ['Restaurant/Home/restaurantDelete',['GET']],\n                '/^\\/restaurant\\/get\\/?$/'        =  ['Restaurant/Home/restaurantGet',['GET']],\n                '/^\\/restaurant\\/select\\/?$/'     =  ['Restaurant/Home/restaurantSelect',['GET']],\n                '/^\\/restaurant\\/other-page\\/?$/' =  ['Restaurant/Home/otherView',['GET']],\n            ];\n        }\n    }\n}", 
            "title": "URL route"
        }, 
        {
            "location": "/quick_start/#model", 
            "text": "Example of table Person, Product and Purchase, with relationship.  CREATE TABLE `person` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `first_name`    TEXT,\n    `last_name` TEXT\n);\n\nCREATE TABLE `product` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `price` REAL NOT NULL\n);\n\nCREATE TABLE `purchase` (\n    `id`    INTEGER PRIMARY KEY AUTOINCREMENT,\n    `person_id` INTEGER NOT NULL,\n    `product_id`    NUMERIC NOT NULL,\n    `quantity`  INTEGER NOT NULL\n);  The model will be created in the  Restaurant  bundle, in the  Model  folder, accordance with SQL entities listed above.  namespace Application\\Restaurant\\Model\\Person {\n    use Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 first_name  =  Model::char([ length  =  40]),\n                 last_name  =  Model::char([ length  =  40])];\n        }\n\n        protected function name() {\n            return  person ;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Product {\n    use Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 name  =  Model::char([ length  =  40]),\n                 price  =  Model::float([ length  =  20])];\n        }\n\n        protected function name() {\n            return  product ;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Purchase {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Person;\n    use Application\\Restaurant\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 person_id  =  Model::foreignKey([ table  =  new Person\\Person, null  =  0]),\n                 product_id  =  Model::foreignKey([ table  =  new Product\\Product, null  =  0]),\n                 quantity  =  Model::integer([ length  =  20])];\n        }\n\n        protected function name() {\n            return  purchase ;\n        }\n    }\n}", 
            "title": "Model"
        }, 
        {
            "location": "/quick_start/#controller", 
            "text": "The controller will create a  Home.php  name file, it will contain some actions,\nthat will be accessed by routes previously registered at class  Url .   ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Restaurant;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            // load transaction object\n            $this- db_transaction = new Transaction();\n        }\n\n        public function home() {\n            print 'home page';\n        }\n\n        public function restaurantAdd() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- db_transaction);\n\n            // open connection\n            $this- db_transaction- connect();\n\n            // save\n            $restaurant- save([\n                'name' =  'place of test',\n                'serves_hot_dogs' =  1,\n                'serves_pizza' =  1,]);\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantUpdate() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- db_transaction);\n\n            // open connection\n            $this- db_transaction- connect();\n\n            // save\n            $restaurant- save([\n                'name' =  'place of test',\n                'serves_hot_dogs' =  1,\n                'serves_pizza' =  1,]);\n\n            // update\n            $restaurant- place = 'bla e bla';\n            $restaurant- serves_hot_dogs = 0;\n            $restaurant- save();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantDelete() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- db_transaction);\n\n            // open connection\n            $this- db_transaction- connect();\n\n            // delete all register without filter\n            // $restaurant- delete();\n\n            // save\n            $restaurant- save([\n                'name' =  'place of test',\n                'serves_hot_dogs' =  1,\n                'serves_pizza' =  1,]);\n\n            // delete current instance\n            $restaurant- delete();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantGet() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- db_transaction);\n\n            // open connection\n            $this- db_transaction- connect();\n\n            // get(unique)\n            $restaurant- get([\n                'name' =  'place of test']);\n\n            // delete current instance\n            // $restaurant- delete();\n\n            // update\n            // $restaurant- name = 'bla e bla';\n            // $restaurant- serves_hot_dogs = 0;\n            // $restaurant- save();\n\n            Util::renderToJson($restaurant);\n        }\n\n        public function restaurantSelect() {\n            // load model with Transaction instance\n            $restaurant = new Restaurant($this- db_transaction);\n\n            // open connection\n            $this- db_transaction- connect();\n\n            // select with where, order by, limit(pagination) and join left\n            // $restaurant_list = $restaurant\n            //     - where([\n            //         'restaurant.id' =  [15,16],])\n            //     - orderBy([\n            //         'restaurant.serves_pizza' =  'desc'])\n            //     - limit(1,5)\n            //     - execute([\n            //         'join' =  'left']);\n\n            // select with update and return changes\n            $restaurant_list = $restaurant\n                - where([\n                    'restaurant.serves_hot_dogs' =  [1,0],]) // id in(1,2)\n                - orderBy([\n                    'restaurant.serves_pizza' =  'desc'])\n                - limit(1,5) // page 1 limit 5\n                - update([\n                    'name' =  'place update yea!']) // update in current select\n                - execute([\n                    'join' =  'left']); // join left|right optional\n\n            // list of query's\n            // Util::renderToJson($restaurant- dumpQuery());\n\n            // render to json result\n            Util::renderToJson($restaurant_list);\n        }\n    }\n}", 
            "title": "Controller"
        }, 
        {
            "location": "/quick_start/#view-or-template", 
            "text": "In view folder (or template), the static files(html, js, css, jpg, etc) will be stored.\nYou can feel free to use engine templates, eg  Twig .\nOr create something amazing with angular.js  Thank you.", 
            "title": "View or Template"
        }, 
        {
            "location": "/orm/", 
            "text": "ORM\n\n\nWe will show how to make the major database operations, such as insert, update, delete and select.\nWill be created model's and controllers, with queries similar to the active record pattern, using the integrated ORM framework.\n\n\nBundle\n\n\nThe example application has the name \nRestaurant\n, having a model \nRestaurant.php\n and a controller \nHome.php\n below the mounted structure for this example.\n\n\n\n\nRemains only registering this new bundle in \nsrc/Config/app.json\n file, as shown below:\n\n\n[\n    \nRestaurant\n\n]\n\n\n\n\nDatabase\n\n\nCriaremos uma base de dados SQLite com as seguintes tabelas.\n\n\nCREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place` TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant`    INTEGER NOT NULL,\n    `name`  TEXT NOT NULL\n);\n\n\n\n\nThe file \nsrc/config/database.json\n of example for the base SQLite.\n\n\n{\n    \ndefault\n: {\n        \ndriver\n: \nsqlite\n,\n        \nhost\n: \n/home/user/project/database/db_restaurant\n,\n        \nname\n: \n,\n        \nuser\n: \n,\n        \npassword\n: \n,\n        \nport\n: \n,\n        \nautocommit\n: 0,\n        \ndebug\n: 0\n    }\n}\n\n\n\n\nURL\n\n\nFile \nApplication/Restaurant/Url.php\n\n\n?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                '/^\\/?$/'                         =\n [\nRestaurant/Home/home\n,['GET']],\n                '/^\\/home\\/?$/'                   =\n [\nRestaurant/Home/home\n,['GET']],\n                '/^\\/contact\\/?$/'                =\n [\nRestaurant/Contact/contact\n,['GET']],\n                '/^\\/restaurant\\/add\\/?$/'        =\n ['Restaurant/Home/restaurantAdd',['GET']],\n                '/^\\/restaurant\\/update\\/?$/'     =\n ['Restaurant/Home/restaurantUpdate',['GET']],\n                '/^\\/restaurant\\/delete\\/?$/'     =\n ['Restaurant/Home/restaurantDelete',['GET']],\n                '/^\\/restaurant\\/get\\/?$/'        =\n ['Restaurant/Home/restaurantGet',['GET']],\n                '/^\\/restaurant\\/select\\/?$/'     =\n ['Restaurant/Home/restaurantSelect',['GET']],\n                '/^\\/restaurant\\/other-page\\/?$/' =\n ['Restaurant/Home/otherView',['GET']],\n            ];\n        }\n    }\n}\n\n\n\n\nModel\n\n\nThe model will be created in the \nRestaurant\n bundle, in the \nModel\n folder, accordance with SQL entities listed above.\n\n\nnamespace Application\\Restaurant\\Model\\Person {\n    use Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nfirst_name\n =\n Model::char([\nlength\n =\n 40]),\n                \nlast_name\n =\n Model::char([\nlength\n =\n 40])];\n        }\n\n        protected function name() {\n            return \nperson\n;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Product {\n    use Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nname\n =\n Model::char([\nlength\n =\n 40]),\n                \nprice\n =\n Model::float([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \nproduct\n;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Purchase {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Person;\n    use Application\\Restaurant\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                \nid\n =\n Model::primaryKey(),\n                \nperson_id\n =\n Model::foreignKey([\ntable\n =\n new Person\\Person,\nnull\n =\n 0]),\n                \nproduct_id\n =\n Model::foreignKey([\ntable\n =\n new Product\\Product,\nnull\n =\n 0]),\n                \nquantity\n =\n Model::integer([\nlength\n =\n 20])];\n        }\n\n        protected function name() {\n            return \npurchase\n;\n        }\n    }\n}\n\n\n\n\nController\n\n\nController \nHome.php\n.\n\n\n?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Restaurant;\n    use Application\\Restaurant\\Model\\Place;\n    use Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            $this-\ndb_transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            //\n        }\n\n        public function restaurantUpdate() {\n            //\n        }\n\n        public function restaurantDelete() {\n            //\n        }\n\n        public function restaurantGet() {\n            //\n        }\n\n        public function restaurantListing() {\n            //\n        }\n    }\n}\n\n\n\n\n\nAdd record\n\n\nThe controller to add records will have the following format.\n\n\npublic function restaurantAdd() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nUpdate record\n\n\nThe controller to update records will have the following format.\n\n\npublic function restaurantUpdate() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    // update\n    $restaurant-\nplace = 'bla e bla';\n    $restaurant-\nserves_hot_dogs = 0;\n    $restaurant-\nsave();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nDelete record\n\n\nThe controller to delete records will have the following format.\n\n\npublic function restaurantDelete() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // delete all register without filter\n    // $restaurant-\ndelete();\n\n    // save\n    $restaurant-\nsave([\n        'place' =\n 'place of test',\n        'serves_hot_dogs' =\n 1,\n        'serves_pizza' =\n 1,]);\n\n    // delete current instance\n    $restaurant-\ndelete();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nGet record\n\n\nThe controller to get records will have the following format.\n\n\npublic function restaurantGet() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // get(unique)\n    $restaurant-\nget([\n        'place' =\n 'place of test']);\n\n    // delete current instance\n    // $restaurant-\ndelete();\n\n    // update\n    // $restaurant-\nplace = 'bla e bla';\n    // $restaurant-\nserves_hot_dogs = 0;\n    // $restaurant-\nsave();\n\n    Util::renderToJson($restaurant);\n}\n\n\n\n\nSelect record\n\n\nThe controller to filter records will have the following format.\n\n\npublic function restaurantListing() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this-\ndb_transaction);\n\n    // open connection\n    $this-\ndb_transaction-\nconnect();\n\n    // select with where, order by, limit(pagination) and join left\n    // $restaurant_list = $restaurant\n    //     -\nwhere([\n    //         'restaurant.id' =\n [15,16],])\n    //     -\norderBy([\n    //         'restaurant.serves_pizza' =\n 'desc'])\n    //     -\nlimit(1,5)\n    //     -\nupdate([\n    //         'place' =\n 'testandiooo123654'])\n    //     -\nexecute([\n    //         'join' =\n 'left']);\n\n    // select with update and return changes\n    $restaurant_list = $restaurant\n        -\nwhere([\n            'restaurant.serves_hot_dogs' =\n [1,0],]) // id in(1,2)\n        -\norderBy([\n            'restaurant.serves_pizza' =\n 'desc'])\n        -\nlimit(1,5) // page 1 limit 5\n        -\nupdate([\n            'place' =\n 'place update yea!']) // update in current select\n        -\nexecute([\n            'join' =\n 'left']); // join left|right optional\n\n    // list of query's\n    // Util::renderToJson($restaurant-\ndumpQuery());\n\n    // render to json result\n    Util::renderToJson($restaurant_list);\n}", 
            "title": "ORM"
        }, 
        {
            "location": "/orm/#orm", 
            "text": "We will show how to make the major database operations, such as insert, update, delete and select.\nWill be created model's and controllers, with queries similar to the active record pattern, using the integrated ORM framework.", 
            "title": "ORM"
        }, 
        {
            "location": "/orm/#bundle", 
            "text": "The example application has the name  Restaurant , having a model  Restaurant.php  and a controller  Home.php  below the mounted structure for this example.   Remains only registering this new bundle in  src/Config/app.json  file, as shown below:  [\n     Restaurant \n]", 
            "title": "Bundle"
        }, 
        {
            "location": "/orm/#database", 
            "text": "Criaremos uma base de dados SQLite com as seguintes tabelas.  CREATE TABLE `place` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `name`  TEXT NOT NULL,\n    `address`   TEXT NOT NULL\n);\n\nCREATE TABLE `restaurant` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `place` TEXT NOT NULL,\n    `serves_hot_dogs`   INTEGER NOT NULL,\n    `serves_pizza`  INTEGER NOT NULL\n);\n\nCREATE TABLE `waiter` (\n    `id`    INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    `restaurant`    INTEGER NOT NULL,\n    `name`  TEXT NOT NULL\n);  The file  src/config/database.json  of example for the base SQLite.  {\n     default : {\n         driver :  sqlite ,\n         host :  /home/user/project/database/db_restaurant ,\n         name :  ,\n         user :  ,\n         password :  ,\n         port :  ,\n         autocommit : 0,\n         debug : 0\n    }\n}", 
            "title": "Database"
        }, 
        {
            "location": "/orm/#url", 
            "text": "File  Application/Restaurant/Url.php  ?php\n\nnamespace Application\\Restaurant {\n    class Url {\n        static public function url() {\n            return [\n                '/^\\/?$/'                         =  [ Restaurant/Home/home ,['GET']],\n                '/^\\/home\\/?$/'                   =  [ Restaurant/Home/home ,['GET']],\n                '/^\\/contact\\/?$/'                =  [ Restaurant/Contact/contact ,['GET']],\n                '/^\\/restaurant\\/add\\/?$/'        =  ['Restaurant/Home/restaurantAdd',['GET']],\n                '/^\\/restaurant\\/update\\/?$/'     =  ['Restaurant/Home/restaurantUpdate',['GET']],\n                '/^\\/restaurant\\/delete\\/?$/'     =  ['Restaurant/Home/restaurantDelete',['GET']],\n                '/^\\/restaurant\\/get\\/?$/'        =  ['Restaurant/Home/restaurantGet',['GET']],\n                '/^\\/restaurant\\/select\\/?$/'     =  ['Restaurant/Home/restaurantSelect',['GET']],\n                '/^\\/restaurant\\/other-page\\/?$/' =  ['Restaurant/Home/otherView',['GET']],\n            ];\n        }\n    }\n}", 
            "title": "URL"
        }, 
        {
            "location": "/orm/#model", 
            "text": "The model will be created in the  Restaurant  bundle, in the  Model  folder, accordance with SQL entities listed above.  namespace Application\\Restaurant\\Model\\Person {\n    use Core\\Model;\n\n    class Person extends Model {\n        public $id;\n        public $first_name;\n        public $last_name;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 first_name  =  Model::char([ length  =  40]),\n                 last_name  =  Model::char([ length  =  40])];\n        }\n\n        protected function name() {\n            return  person ;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Product {\n    use Core\\Model;\n\n    class Product extends Model {\n        public $id;\n        public $name;\n        public $price;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 name  =  Model::char([ length  =  40]),\n                 price  =  Model::float([ length  =  20])];\n        }\n\n        protected function name() {\n            return  product ;\n        }\n    }\n}\n\nnamespace Application\\Restaurant\\Model\\Purchase {\n    use Core\\Model;\n    use Application\\Restaurant\\Model\\Person;\n    use Application\\Restaurant\\Model\\Product;\n\n    class Purchase extends Model {\n        public $id;\n        public $person_id;\n        public $product_id;\n        public $quantity;\n\n        protected function schema() {\n            return [\n                 id  =  Model::primaryKey(),\n                 person_id  =  Model::foreignKey([ table  =  new Person\\Person, null  =  0]),\n                 product_id  =  Model::foreignKey([ table  =  new Product\\Product, null  =  0]),\n                 quantity  =  Model::integer([ length  =  20])];\n        }\n\n        protected function name() {\n            return  purchase ;\n        }\n    }\n}", 
            "title": "Model"
        }, 
        {
            "location": "/orm/#controller", 
            "text": "Controller  Home.php .  ?php\n\nnamespace Application\\Restaurant\\Controller {\n    use Core\\Controller;\n    use Core\\DAO\\Transaction;\n    use Core\\Util;\n    use Application\\Restaurant\\Model\\Restaurant;\n    use Application\\Restaurant\\Model\\Place;\n    use Application\\Restaurant\\Model\\Waiter;\n\n    class Home extends Controller {\n        private $db_transaction;\n\n        public function __construct($request_method = null) {\n            parent::__construct($request_method);\n\n            $this- db_transaction = new Transaction();\n        }\n\n        public function restaurantAdd() {\n            //\n        }\n\n        public function restaurantUpdate() {\n            //\n        }\n\n        public function restaurantDelete() {\n            //\n        }\n\n        public function restaurantGet() {\n            //\n        }\n\n        public function restaurantListing() {\n            //\n        }\n    }\n}", 
            "title": "Controller"
        }, 
        {
            "location": "/orm/#add-record", 
            "text": "The controller to add records will have the following format.  public function restaurantAdd() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    Util::renderToJson($restaurant);\n}", 
            "title": "Add record"
        }, 
        {
            "location": "/orm/#update-record", 
            "text": "The controller to update records will have the following format.  public function restaurantUpdate() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    // update\n    $restaurant- place = 'bla e bla';\n    $restaurant- serves_hot_dogs = 0;\n    $restaurant- save();\n\n    Util::renderToJson($restaurant);\n}", 
            "title": "Update record"
        }, 
        {
            "location": "/orm/#delete-record", 
            "text": "The controller to delete records will have the following format.  public function restaurantDelete() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // delete all register without filter\n    // $restaurant- delete();\n\n    // save\n    $restaurant- save([\n        'place' =  'place of test',\n        'serves_hot_dogs' =  1,\n        'serves_pizza' =  1,]);\n\n    // delete current instance\n    $restaurant- delete();\n\n    Util::renderToJson($restaurant);\n}", 
            "title": "Delete record"
        }, 
        {
            "location": "/orm/#get-record", 
            "text": "The controller to get records will have the following format.  public function restaurantGet() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // get(unique)\n    $restaurant- get([\n        'place' =  'place of test']);\n\n    // delete current instance\n    // $restaurant- delete();\n\n    // update\n    // $restaurant- place = 'bla e bla';\n    // $restaurant- serves_hot_dogs = 0;\n    // $restaurant- save();\n\n    Util::renderToJson($restaurant);\n}", 
            "title": "Get record"
        }, 
        {
            "location": "/orm/#select-record", 
            "text": "The controller to filter records will have the following format.  public function restaurantListing() {\n    // load model with Transaction instance\n    $restaurant = new Restaurant($this- db_transaction);\n\n    // open connection\n    $this- db_transaction- connect();\n\n    // select with where, order by, limit(pagination) and join left\n    // $restaurant_list = $restaurant\n    //     - where([\n    //         'restaurant.id' =  [15,16],])\n    //     - orderBy([\n    //         'restaurant.serves_pizza' =  'desc'])\n    //     - limit(1,5)\n    //     - update([\n    //         'place' =  'testandiooo123654'])\n    //     - execute([\n    //         'join' =  'left']);\n\n    // select with update and return changes\n    $restaurant_list = $restaurant\n        - where([\n            'restaurant.serves_hot_dogs' =  [1,0],]) // id in(1,2)\n        - orderBy([\n            'restaurant.serves_pizza' =  'desc'])\n        - limit(1,5) // page 1 limit 5\n        - update([\n            'place' =  'place update yea!']) // update in current select\n        - execute([\n            'join' =  'left']); // join left|right optional\n\n    // list of query's\n    // Util::renderToJson($restaurant- dumpQuery());\n\n    // render to json result\n    Util::renderToJson($restaurant_list);\n}", 
            "title": "Select record"
        }
    ]
}